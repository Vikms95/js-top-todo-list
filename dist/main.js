(()=>{"use strict";var t={343:(t,e,n)=>{t.exports=n.p+"d426841ce427bbc651e1.jpg"}},e={};function n(a){var r=e[a];if(void 0!==r)return r.exports;var i=e[a]={exports:{}};return t[a](i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var a=e.getElementsByTagName("script");a.length&&(t=a[a.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{let t=[],e=[];function a(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function r(t){return a(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function i(t){a(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(t){if(a(1,arguments),!r(t)&&"number"!=typeof t)return!1;var e=i(t);return!isNaN(Number(e))}var d={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function s(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,a=t.formats[n]||t.formats[t.defaultWidth];return a}}var c,l={date:s({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:s({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:s({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},u={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function h(t){return function(e,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,o=r.width?String(r.width):i;a=t.formattingValues[o]||t.formattingValues[i]}else{var d=t.defaultWidth,s=r.width?String(r.width):t.defaultWidth;a=t.values[s]||t.values[d]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function m(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;var o,d=i[0],s=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?g(s,(function(t){return t.test(d)})):f(s,(function(t){return t.test(d)}));o=t.valueCallback?t.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var l=e.slice(d.length);return{value:o,rest:l}}}function f(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function g(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const p={code:"en-US",formatDistance:function(t,e,n){var a,r=d[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:l,formatRelative:function(t,e,n,a){return u[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:h({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:h({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:h({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:h({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:h({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(c={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(c.matchPattern);if(!n)return null;var a=n[0],r=t.match(c.parsePattern);if(!r)return null;var i=c.valueCallback?c.valueCallback(r[0]):r[0];i=e.valueCallback?e.valueCallback(i):i;var o=t.slice(a.length);return{value:i,rest:o}}),era:m({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:m({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:m({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:m({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:m({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function w(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function v(t,e){a(2,arguments);var n=i(t).getTime(),r=w(e);return new Date(n+r)}function b(t,e){a(2,arguments);var n=w(e);return v(t,-n)}var y=864e5;function C(t){a(1,arguments);var e=1,n=i(t),r=n.getUTCDay(),o=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function T(t){a(1,arguments);var e=i(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=C(r),d=new Date(0);d.setUTCFullYear(n,0,4),d.setUTCHours(0,0,0,0);var s=C(d);return e.getTime()>=o.getTime()?n+1:e.getTime()>=s.getTime()?n:n-1}function E(t){a(1,arguments);var e=T(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=C(n);return r}var k=6048e5;function L(t,e){a(1,arguments);var n=e||{},r=n.locale,o=r&&r.options&&r.options.weekStartsOn,d=null==o?0:w(o),s=null==n.weekStartsOn?d:w(n.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=i(t),l=c.getUTCDay(),u=(l<s?7:0)+l-s;return c.setUTCDate(c.getUTCDate()-u),c.setUTCHours(0,0,0,0),c}function M(t,e){a(1,arguments);var n=i(t),r=n.getUTCFullYear(),o=e||{},d=o.locale,s=d&&d.options&&d.options.firstWeekContainsDate,c=null==s?1:w(s),l=null==o.firstWeekContainsDate?c:w(o.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(r+1,0,l),u.setUTCHours(0,0,0,0);var h=L(u,e),m=new Date(0);m.setUTCFullYear(r,0,l),m.setUTCHours(0,0,0,0);var f=L(m,e);return n.getTime()>=h.getTime()?r+1:n.getTime()>=f.getTime()?r:r-1}function D(t,e){a(1,arguments);var n=e||{},r=n.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:w(i),d=null==n.firstWeekContainsDate?o:w(n.firstWeekContainsDate),s=M(t,e),c=new Date(0);c.setUTCFullYear(s,0,d),c.setUTCHours(0,0,0,0);var l=L(c,e);return l}var x=6048e5;function j(t,e){for(var n=t<0?"-":"",a=Math.abs(t).toString();a.length<e;)a="0"+a;return n+a}const P=function(t,e){var n=t.getUTCFullYear(),a=n>0?n:1-n;return j("yy"===e?a%100:a,e.length)},S=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):j(n+1,2)},U=function(t,e){return j(t.getUTCDate(),e.length)},N=function(t,e){return j(t.getUTCHours()%12||12,e.length)},Y=function(t,e){return j(t.getUTCHours(),e.length)},W=function(t,e){return j(t.getUTCMinutes(),e.length)},H=function(t,e){return j(t.getUTCSeconds(),e.length)},O=function(t,e){var n=e.length,a=t.getUTCMilliseconds();return j(Math.floor(a*Math.pow(10,n-3)),e.length)};function A(t,e){var n=t>0?"-":"+",a=Math.abs(t),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=e||"";return n+String(r)+o+j(i,2)}function I(t,e){return t%60==0?(t>0?"-":"+")+j(Math.abs(t)/60,2):B(t,e)}function B(t,e){var n=e||"",a=t>0?"-":"+",r=Math.abs(t);return a+j(Math.floor(r/60),2)+n+j(r%60,2)}const q={G:function(t,e,n){var a=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var a=t.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return P(t,e)},Y:function(t,e,n,a){var r=M(t,a),i=r>0?r:1-r;return"YY"===e?j(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):j(i,e.length)},R:function(t,e){return j(T(t),e.length)},u:function(t,e){return j(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return j(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return j(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){var a=t.getUTCMonth();switch(e){case"M":case"MM":return S(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){var a=t.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return j(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=function(t,e){a(1,arguments);var n=i(t),r=L(n,e).getTime()-D(n,e).getTime();return Math.round(r/x)+1}(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):j(o,e.length)},I:function(t,e,n){var r=function(t){a(1,arguments);var e=i(t),n=C(e).getTime()-E(e).getTime();return Math.round(n/k)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):j(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):U(t,e)},D:function(t,e,n){var r=function(t){a(1,arguments);var e=i(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=n-r;return Math.floor(o/y)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):j(r,e.length)},E:function(t,e,n){var a=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return j(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return j(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var a=t.getUTCDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return j(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){var a=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){var a,r=t.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){var a,r=t.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var a=t.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return N(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):Y(t,e)},K:function(t,e,n){var a=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):j(a,e.length)},k:function(t,e,n){var a=t.getUTCHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):j(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):W(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):H(t,e)},S:function(t,e){return O(t,e)},X:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return I(r);case"XXXX":case"XX":return B(r);default:return B(r,":")}},x:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return I(r);case"xxxx":case"xx":return B(r);default:return B(r,":")}},O:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+A(r,":");default:return"GMT"+B(r,":")}},z:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+A(r,":");default:return"GMT"+B(r,":")}},t:function(t,e,n,a){var r=a._originalDate||t;return j(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,a){return j((a._originalDate||t).getTime(),e.length)}};function F(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function _(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}var z={p:_,P:function(t,e){var n,a=t.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return F(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",F(r,e)).replace("{{time}}",_(i,e))}};const Q=z;function G(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var X=["D","DD"],R=["YY","YYYY"];function J(t){return-1!==X.indexOf(t)}function V(t){return-1!==R.indexOf(t)}function $(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var K=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Z=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,tt=/^'([^]*?)'?$/,et=/''/g,nt=/[a-zA-Z]/;function at(t,e,n){a(2,arguments);var r=String(e),d=n||{},s=d.locale||p,c=s.options&&s.options.firstWeekContainsDate,l=null==c?1:w(c),u=null==d.firstWeekContainsDate?l:w(d.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=s.options&&s.options.weekStartsOn,m=null==h?0:w(h),f=null==d.weekStartsOn?m:w(d.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var g=i(t);if(!o(g))throw new RangeError("Invalid time value");var v=G(g),y=b(g,v),C={firstWeekContainsDate:u,weekStartsOn:f,locale:s,_originalDate:g},T=r.match(Z).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,Q[e])(t,s.formatLong,C):t})).join("").match(K).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return rt(n);var r=q[a];if(r)return!d.useAdditionalWeekYearTokens&&V(n)&&$(n,e,t),!d.useAdditionalDayOfYearTokens&&J(n)&&$(n,e,t),r(y,n,s.localize,C);if(a.match(nt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("");return T}function rt(t){return t.match(tt)[1].replace(et,"'")}function it(e,n){e.addEventListener("click",(()=>{n.projectTitleItBelongs&&(ct(n),n.projectTitleItBelongs=""),dt(n),st(n,t),e.parentNode.parentNode.parentNode.remove()}))}function ot(t,e){t.addEventListener("click",(()=>{!1===e.checkmark?(e.checkmark=!0,ht(e)):(e.checkmark=!1,ht(e))}))}function dt(t){localStorage.removeItem(t.title)}const st=(t,e)=>{for(let n=0;n<e.length;n++)e[n]._id===t._id&&(e[n]="")},ct=t=>{const n=e.find((e=>e.title===t.projectTitleItBelongs));for(let e=0;e<n._attachedProjectTodos.length;e++)n._attachedProjectTodos[e]._id===t._id&&(n._attachedProjectTodos[e]={},ht(n))};function lt(t,n,a){t.addEventListener("click",(()=>{t.firstChild.classList.contains("blue")?(n.priority=1,a.style.color="blue"):t.firstChild.classList.contains("orange")?(n.priority=2,a.style.color="orange"):t.firstChild.classList.contains("red")&&(n.priority=3,a.style.color="red"),ht(n),n.projectTitleItBelongs&&(console.log("hi"),ht(e.find((t=>t.title===n.projectTitleItBelongs))))}))}const ut=function(t){const e=t||mt();if(null===e)return null;const n=document.createElement("div"),a=document.createElement("div"),r=document.createElement("button"),i=document.createElement("div"),o=document.createElement("div"),d=document.createElement("div"),s=document.createElement("button"),c=document.createElement("button"),l=document.createElement("div"),u=document.createElement("button"),h=document.createElement("button"),m=document.createElement("button"),f=document.createElement("div"),g=document.createElement("div"),p=document.createElement("div"),w=document.createElement("div");return n.appendChild(a),n.appendChild(i),n.appendChild(o),a.appendChild(r),o.appendChild(d),d.appendChild(s),d.appendChild(c),l.appendChild(u),l.appendChild(h),l.appendChild(m),i.appendChild(f),i.appendChild(g),g.appendChild(p),g.appendChild(w),n.classList.add("todo-container"),n.classList.add("faded-out"),a.classList.add("buttons"),a.classList.add("checkmark"),d.classList.add("todo"),o.classList.add("buttons-container"),d.classList.add("buttons"),d.classList.add("right"),l.classList.add("buttons"),l.classList.add("right"),i.classList.add("todo"),i.classList.add("body"),f.classList.add("todo"),f.classList.add("title"),p.classList.add("fa-solid"),p.classList.add("fa-circle"),p.classList.add("fa-2xs"),g.classList.add("due-date"),r.setAttribute("title","Checkmark task"),s.setAttribute("title","Expand task"),c.setAttribute("title","Delete task"),u.setAttribute("title","Set low priority"),h.setAttribute("title","Set medium priority"),m.setAttribute("title","Set high priority"),requestAnimationFrame((()=>{n.classList.remove("faded-out")})),r.innerHTML='<i class="fa-solid fa-check fa-2xs"></i>',f.textContent=e.title,w.textContent=e.dueDate,s.innerHTML='<i class="fa-solid fa-angle-down"></i>',c.innerHTML='<i class="fa-solid fa-trash-can fa-lg">',u.innerHTML='<i class="fa-solid fa-flag blue"></i>',h.innerHTML='<i class="fa-solid fa-flag orange"></i>',m.innerHTML='<i class="fa-solid fa-flag red"></i>',g.style.color=function(t){return{1:"darkblue",2:"darkorange",3:"crimson"}[t.priority]}(e),ot(r,e),function(t,e,n,a,r){t.addEventListener("click",(()=>{if(n.childNodes.length>2)n.removeChild(n.lastChild),a.removeChild(a.lastChild);else{const t=document.createElement("div");t.classList.add("description"),n.appendChild(t),t.textContent=e.description,a.appendChild(r)}}))}(s,e,i,o,l),it(c,e),lt(u,e,g),lt(h,e,g),lt(m,e,g),n};function ht(t){localStorage.setItem(t.title,JSON.stringify(t))}function mt(){let e=prompt("Enter title");if(null===e)return null;if(e.length<1||e.length>40)return void alert("Title needs a min of 1 character and no more than 40 characters!");let n=prompt("Enter due year"),a=prompt("Enter due month"),r=prompt("Enter due day");if(isNaN(n)||isNaN(a)||isNaN(r))return void alert("Due date values must be numbers!");let i=prompt("Enter priority (1 = low, 2 = medium, 3 = high)");if(null===i)return null;let o=prompt("Enter description");if(null===o)return null;if(o.length>80)return void alert("Description can't be more than 80 characters!");let d=function(t,e,n,a,r,i){return e=e,n=n,a=a,{_id:ft(),prototypeMadeUp:"todo",title:t,dueDate:at(new Date(a,n,e),"MMMM, E d"),dueDay:e,dueMonth:n,dueYear:a,priority:r,description:i,projectTitleItBelongs:"",checkmark:!1}}(e,r,a,n,i,o);return t.push(d),ht(d),d}const ft=function(){let t=0;return function(){return t++}}();function gt(t){let n=document.getElementById("dynamic-content");const a=document.createElement("div"),r=document.createElement("div"),i=document.createElement("button"),o=document.createElement("div"),d=document.createElement("div"),s=document.createElement("div"),c=document.createElement("button"),l=document.createElement("button"),u=document.createElement("div"),h=document.createElement("button"),m=document.createElement("button"),f=document.createElement("button"),g=document.createElement("div"),p=document.createElement("div"),w=document.createElement("div"),v=document.createElement("div"),b=document.createElement("div");a.appendChild(r),a.appendChild(o),a.appendChild(d),r.appendChild(i),d.appendChild(s),d.appendChild(u),s.appendChild(l),s.appendChild(c),u.appendChild(h),u.appendChild(m),u.appendChild(f),o.appendChild(g),o.appendChild(p),p.appendChild(w),p.appendChild(v),o.appendChild(b),a.classList.add("todo-container"),a.classList.add("faded-out"),r.classList.add("buttons"),r.classList.add("checkmark"),d.classList.add("buttons-container"),s.classList.add("todo"),s.classList.add("buttons"),s.classList.add("right"),u.classList.add("buttons"),u.classList.add("right"),o.classList.add("todo"),o.classList.add("body"),g.classList.add("todo"),g.classList.add("title"),w.classList.add("fa-solid"),w.classList.add("fa-circle"),w.classList.add("fa-2xs"),p.classList.add("due-date"),b.classList.add("todo"),b.classList.add("description"),i.setAttribute("title","Checkmark task"),l.setAttribute("title","Add this task to a project"),c.setAttribute("title","Delete task"),h.setAttribute("title","Set low priority"),m.setAttribute("title","Set medium priority"),f.setAttribute("title","Set high priority"),requestAnimationFrame((()=>{a.classList.remove("faded-out")}));const y=t||mt();return null===y?null:(i.innerHTML='<i class="fa-solid fa-check fa-2xs"></i>',g.textContent=y.title,v.textContent=y.dueDate,b.textContent=y.description,l.innerHTML='<i class="fa-solid fa-arrow-right-to-bracket fa-lg"></i>',c.innerHTML='<i class="fa-solid fa-trash-can fa-lg">',h.innerHTML='<i class="fa-solid fa-flag blue"></i>',m.innerHTML='<i class="fa-solid fa-flag orange"></i>',f.innerHTML='<i class="fa-solid fa-flag red"></i>',p.style.color=function(t){return{1:"darkblue",2:"darkorange",3:"crimson"}[t.priority]}(y),ot(i,y),function(t,n){t.addEventListener("click",(()=>{n.projectTitleItBelongs?alert("Task already assigned to a project."):(t=>{const n=prompt("Insert the project title where this task should be added to ");if(null===n)return;const a=e.find((t=>t.title===n));console.log(a),a?(a._attachedProjectTodos.push(t),t.projectTitleItBelongs=n,ht(t),localStorage.setItem(n,JSON.stringify(a))):alert("Project does not exist. Make sure the title is well written or create the project.")})(n)}))}(l,y),it(c,y),lt(h,y,p),lt(m,y,p),lt(f,y,p),n.appendChild(a),n)}function pt(){let t=prompt("Enter title");const n=function(t){return{_id:wt(),prototypeMadeUp:"project",title:t,isDefault:!1,_attachedProjectTodos:[],isProjectTitleValid:t=>{if(null===t)return!1;if(t.length<1||t.length>40)return alert("Title needs a min of 1 character and no more than 40 characters!"),!1;const n=e.some((e=>e.title===t));return!n||(alert("Project already exists! Please pick another title."),!1)}}}(t);return n.isProjectTitleValid(t)?(e.push(n),ht(n),n):null}const wt=function(){let t=1e3;return function(){return t++}}();function vt(n){let a=document.getElementById("dynamic-content");const r=n||pt();if(null==r)return null;const i=document.createElement("div"),o=document.createElement("div"),d=document.createElement("button"),s=document.createElement("button"),c=document.createElement("button"),l=document.createElement("button"),u=document.createElement("div"),h=document.createElement("div"),m=document.createElement("div"),f=document.createElement("div"),g=document.createElement("ol");return i.appendChild(u),u.appendChild(h),h.appendChild(m),h.appendChild(o),u.appendChild(f),f.appendChild(g),o.appendChild(d),o.appendChild(s),o.appendChild(c),o.appendChild(l),r._attachedProjectTodos.length>0&&r._attachedProjectTodos.forEach((t=>{Object.keys(t).length>0&&!1===t.checkmark&&g.appendChild(ut(t))})),i.classList.add("project-container"),i.classList.add("faded-out"),o.classList.add("buttons"),o.classList.add("right"),u.classList.add("project"),h.classList.add("project-header"),m.classList.add("project"),m.classList.add("title"),f.classList.add("todo-list-container"),g.classList.add("todo-list"),d.setAttribute("title","Create task in this project"),s.setAttribute("title","Add existing task"),c.setAttribute("title","Toogle project default"),l.setAttribute("title","Delete project"),requestAnimationFrame((()=>{i.classList.remove("faded-out")})),d.innerHTML='<i class="fa-solid fa-plus fa-lg"></i>',s.innerHTML='<i class="fa-solid fa-arrow-right-to-bracket fa-lg"></i>',l.innerHTML='<i class="fa-solid fa-trash-can fa-lg">',c.innerHTML='<i class="fa-solid fa-font-awesome"></i>',m.textContent=r.title,function(t,e){t.addEventListener("click",(()=>{const t=mt();e._attachedProjectTodos.push(t),t.projectTitleItBelongs=e.title,ht(t),ht(e),ut(t)}))}(d,r),function(e,n){e.addEventListener("click",(()=>{const e=prompt("Insert the todo title that you want to add to this project");null!==e&&(((e,n)=>{const a=t.find((t=>t.title===n));console.log(a),a&&!a.projectTitleItBelongs?(e._attachedProjectTodos.push(a),a.projectTitleItBelongs=e.title,ht(a),ht(e)):alert("Task already assigned to a project or does not exist.")})(n,e),ht(n))}))}(s,r),function(t,n){t.addEventListener("click",(()=>{(t=>{if(!t.isDefault)return e.some((t=>!0===t.isDefault))?void alert("There is already a project set to default!"):void(t.isDefault=!0);t.isDefault=!1})(n),ht(n)}))}(c,r),function(t,n){t.addEventListener("click",(()=>{n._attachedProjectTodos.forEach((t=>{t.projectTitleItBelongs=""})),st(n,e),n._attachedProjectTodos.forEach((t=>{ht(t)})),dt(n),t.parentNode.parentNode.parentNode.parentNode.remove()}))}(l,r),a.appendChild(i),a}function bt(){const n=document.getElementById("dynamic-content");for(;n.firstChild;)n.firstChild.remove();const a=document.createElement("h3"),r=document.createElement("h3"),i=document.createElement("h3"),o=document.createElement("h3");a.classList.add("home-header"),r.classList.add("home-header"),i.classList.add("home-header"),o.classList.add("home-header"),a.textContent="Unnattached task",r.textContent="Projects",i.textContent="Empty projects",o.textContent="Archived task",n.appendChild(a),t.forEach((t=>{!t||t.projectTitleItBelongs||t.checkmark||gt(t)})),n.appendChild(r),e.forEach((t=>{if(t&&t._attachedProjectTodos){const e=t._attachedProjectTodos.some((t=>Object.keys(t).length>0));t._attachedProjectTodos.length>0&&e&&vt(t)}})),n.appendChild(i),e.forEach((t=>{t&&t._attachedProjectTodos&&t._attachedProjectTodos.every((t=>0===Object.keys(t).length))&&vt(t)})),n.appendChild(o),t.forEach((t=>{t&&t.checkmark&&gt(t)}))}function yt(){const t=document.getElementById("dynamic-content"),n=e.find((t=>!0===t.isDefault));if(n){for(;t.firstChild;)t.firstChild.remove();vt(n)}else alert("There is no default project set!")}var Ct=n(343);function Tt(){const e=document.getElementById("dynamic-content");for(;e.firstChild;)e.firstChild.remove();if(t.forEach((t=>{t&&at(new Date,"yyyy-M-dd")==at(new Date(t.dueYear,t.dueMonth-1,t.dueDay),"yyyy-M-dd")&&gt(t)})),0===e.childNodes.length){const t=document.createElement("h1"),n=document.createElement("div"),a=new Image;a.src=Ct,console.log("hi"),e.appendChild(t),e.appendChild(n),n.appendChild(a),t.classList.add("no-content-header"),t.textContent="It seems like you are done for today!"}}const Et=function(t,e){t.addEventListener("click",(()=>{e()}))};function kt(t,e){a(2,arguments);var n=i(t),r=i(e);return n.getFullYear()===r.getFullYear()&&n.getMonth()===r.getMonth()}function Lt(t,e){a(1,arguments);var n=e||{},r=n.locale,o=r&&r.options&&r.options.weekStartsOn,d=null==o?0:w(o),s=null==n.weekStartsOn?d:w(n.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=i(t),l=c.getDay(),u=(l<s?7:0)+l-s;return c.setDate(c.getDate()-u),c.setHours(0,0,0,0),c}function Mt(t,e,n){a(2,arguments);var r=Lt(t,n),i=Lt(e,n);return r.getTime()===i.getTime()}function Dt(){const e=document.getElementById("dynamic-content");for(;e.firstChild;)e.firstChild.remove();const n=document.createElement("h3"),r=document.createElement("h3");if(n.classList.add("home-header"),r.classList.add("home-header"),n.textContent="Past due task",r.textContent="Upcoming task",e.appendChild(n),t.forEach((t=>{t&&function(t){return a(1,arguments),i(t).getTime()<Date.now()}(new Date(t.dueYear,t.dueMonth-1,t.dueDay+1))&&!1===t.checkmark&&gt(t)})),e.appendChild(r),t.forEach((t=>{if(t){let e=new Date(t.dueYear,t.dueMonth-1,t.dueDay);(function(t){return a(1,arguments),kt(Date.now(),t)}(e)||function(t,e){return a(1,arguments),Mt(t,Date.now(),e)}(e))&&!1===t.checkmark&&gt(t)}})),2===e.childNodes.length){for(;e.firstChild;)e.firstChild.remove();const t=document.createElement("h1"),n=document.createElement("div"),a=new Image;a.src=Ct,console.log("hi"),e.appendChild(t),e.appendChild(n),n.appendChild(a),t.classList.add("no-content-header"),t.textContent="No task are past due or approaching!"}}Object.keys(localStorage).forEach((n=>{if(localStorage.getItem(n)&&void 0!==localStorage.getItem(n)){let a=JSON.parse(localStorage.getItem(n));"todo"===a.prototypeMadeUp?t.push(a):e.push(a)}})),function(){const t=document.getElementById("content"),e=document.createElement("div"),n=document.createElement("div"),a=document.createElement("div"),r=document.createElement("h2"),i=document.createElement("hr"),o=document.createElement("h2"),d=document.createElement("button"),s=document.createElement("button"),c=document.createElement("button"),l=document.createElement("button"),u=document.createElement("hr"),h=document.createElement("button"),m=document.createElement("button");t.appendChild(e),t.appendChild(n),t.appendChild(a),e.appendChild(r),e.appendChild(i),e.appendChild(o),e.appendChild(d),e.appendChild(s),e.appendChild(c),e.appendChild(l),e.appendChild(u),e.appendChild(h),e.appendChild(m),e.classList.add("nav-bar"),r.classList.add("header1"),i.classList.add("header-line"),o.classList.add("header2"),n.id="dynamic-content",d.classList.add("nav-button"),s.classList.add("nav-button"),c.classList.add("nav-button"),l.classList.add("nav-button"),h.classList.add("nav-button"),m.classList.add("nav-button"),r.textContent="Todo",o.textContent="App",d.innerHTML='<i class="fa fa-home fa-lg"></i>  Home',s.innerHTML='<i class="fa fa-hourglass fa-lg"></i> Working on...',h.innerHTML='<i class="fa-solid fa-list-check fa-lg"></i> New project',m.innerHTML='<i class="fa-solid fa-check fa-lg"></i> New task',c.innerHTML='<i class="fa-solid fa-cloud-sun fa-lg"></i> Today',l.innerHTML='<i class="fa-solid fa-calendar-days fa-lg"></i> Upcoming',Et(d,bt),Et(s,yt),Et(c,Tt),Et(l,Dt),Et(h,pt),Et(m,mt)}(),bt()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,