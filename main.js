(()=>{"use strict";let t=[],e=[];function n(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function a(t){return n(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function r(t){n(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function i(t){if(n(1,arguments),!a(t)&&"number"!=typeof t)return!1;var e=r(t);return!isNaN(Number(e))}var o={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function d(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,a=t.formats[n]||t.formats[t.defaultWidth];return a}}var s,c={date:d({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:d({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:d({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},u={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function l(t){return function(e,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,o=r.width?String(r.width):i;a=t.formattingValues[o]||t.formattingValues[i]}else{var d=t.defaultWidth,s=r.width?String(r.width):t.defaultWidth;a=t.values[s]||t.values[d]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function h(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;var o,d=i[0],s=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?f(s,(function(t){return t.test(d)})):m(s,(function(t){return t.test(d)}));o=t.valueCallback?t.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var u=e.slice(d.length);return{value:o,rest:u}}}function m(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function f(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const g={code:"en-US",formatDistance:function(t,e,n){var a,r=o[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:c,formatRelative:function(t,e,n,a){return u[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:l({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:l({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:l({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:l({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:l({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(s={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(s.matchPattern);if(!n)return null;var a=n[0],r=t.match(s.parsePattern);if(!r)return null;var i=s.valueCallback?s.valueCallback(r[0]):r[0];i=e.valueCallback?e.valueCallback(i):i;var o=t.slice(a.length);return{value:i,rest:o}}),era:h({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:h({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:h({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:h({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:h({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function p(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function w(t,e){n(2,arguments);var a=r(t).getTime(),i=p(e);return new Date(a+i)}function v(t,e){n(2,arguments);var a=p(e);return w(t,-a)}var b=864e5;function y(t){n(1,arguments);var e=1,a=r(t),i=a.getUTCDay(),o=(i<e?7:0)+i-e;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function C(t){n(1,arguments);var e=r(t),a=e.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(a+1,0,4),i.setUTCHours(0,0,0,0);var o=y(i),d=new Date(0);d.setUTCFullYear(a,0,4),d.setUTCHours(0,0,0,0);var s=y(d);return e.getTime()>=o.getTime()?a+1:e.getTime()>=s.getTime()?a:a-1}function T(t){n(1,arguments);var e=C(t),a=new Date(0);a.setUTCFullYear(e,0,4),a.setUTCHours(0,0,0,0);var r=y(a);return r}var E=6048e5;function k(t,e){n(1,arguments);var a=e||{},i=a.locale,o=i&&i.options&&i.options.weekStartsOn,d=null==o?0:p(o),s=null==a.weekStartsOn?d:p(a.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=r(t),u=c.getUTCDay(),l=(u<s?7:0)+u-s;return c.setUTCDate(c.getUTCDate()-l),c.setUTCHours(0,0,0,0),c}function M(t,e){n(1,arguments);var a=r(t),i=a.getUTCFullYear(),o=e||{},d=o.locale,s=d&&d.options&&d.options.firstWeekContainsDate,c=null==s?1:p(s),u=null==o.firstWeekContainsDate?c:p(o.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(i+1,0,u),l.setUTCHours(0,0,0,0);var h=k(l,e),m=new Date(0);m.setUTCFullYear(i,0,u),m.setUTCHours(0,0,0,0);var f=k(m,e);return a.getTime()>=h.getTime()?i+1:a.getTime()>=f.getTime()?i:i-1}function L(t,e){n(1,arguments);var a=e||{},r=a.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:p(i),d=null==a.firstWeekContainsDate?o:p(a.firstWeekContainsDate),s=M(t,e),c=new Date(0);c.setUTCFullYear(s,0,d),c.setUTCHours(0,0,0,0);var u=k(c,e);return u}var x=6048e5;function D(t,e){for(var n=t<0?"-":"",a=Math.abs(t).toString();a.length<e;)a="0"+a;return n+a}const P=function(t,e){var n=t.getUTCFullYear(),a=n>0?n:1-n;return D("yy"===e?a%100:a,e.length)},j=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):D(n+1,2)},U=function(t,e){return D(t.getUTCDate(),e.length)},S=function(t,e){return D(t.getUTCHours()%12||12,e.length)},W=function(t,e){return D(t.getUTCHours(),e.length)},N=function(t,e){return D(t.getUTCMinutes(),e.length)},Y=function(t,e){return D(t.getUTCSeconds(),e.length)},H=function(t,e){var n=e.length,a=t.getUTCMilliseconds();return D(Math.floor(a*Math.pow(10,n-3)),e.length)};function O(t,e){var n=t>0?"-":"+",a=Math.abs(t),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=e||"";return n+String(r)+o+D(i,2)}function q(t,e){return t%60==0?(t>0?"-":"+")+D(Math.abs(t)/60,2):B(t,e)}function B(t,e){var n=e||"",a=t>0?"-":"+",r=Math.abs(t);return a+D(Math.floor(r/60),2)+n+D(r%60,2)}const F={G:function(t,e,n){var a=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var a=t.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return P(t,e)},Y:function(t,e,n,a){var r=M(t,a),i=r>0?r:1-r;return"YY"===e?D(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):D(i,e.length)},R:function(t,e){return D(C(t),e.length)},u:function(t,e){return D(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return D(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return D(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){var a=t.getUTCMonth();switch(e){case"M":case"MM":return j(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){var a=t.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return D(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,a,i){var o=function(t,e){n(1,arguments);var a=r(t),i=k(a,e).getTime()-L(a,e).getTime();return Math.round(i/x)+1}(t,i);return"wo"===e?a.ordinalNumber(o,{unit:"week"}):D(o,e.length)},I:function(t,e,a){var i=function(t){n(1,arguments);var e=r(t),a=y(e).getTime()-T(e).getTime();return Math.round(a/E)+1}(t);return"Io"===e?a.ordinalNumber(i,{unit:"week"}):D(i,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):U(t,e)},D:function(t,e,a){var i=function(t){n(1,arguments);var e=r(t),a=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var i=e.getTime(),o=a-i;return Math.floor(o/b)+1}(t);return"Do"===e?a.ordinalNumber(i,{unit:"dayOfYear"}):D(i,e.length)},E:function(t,e,n){var a=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return D(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return D(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var a=t.getUTCDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return D(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){var a=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){var a,r=t.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){var a,r=t.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var a=t.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return S(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):W(t,e)},K:function(t,e,n){var a=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):D(a,e.length)},k:function(t,e,n){var a=t.getUTCHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):D(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):N(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Y(t,e)},S:function(t,e){return H(t,e)},X:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return q(r);case"XXXX":case"XX":return B(r);default:return B(r,":")}},x:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return q(r);case"xxxx":case"xx":return B(r);default:return B(r,":")}},O:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+O(r,":");default:return"GMT"+B(r,":")}},z:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+O(r,":");default:return"GMT"+B(r,":")}},t:function(t,e,n,a){var r=a._originalDate||t;return D(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,a){return D((a._originalDate||t).getTime(),e.length)}};function _(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function I(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}var A={p:I,P:function(t,e){var n,a=t.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return _(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",_(r,e)).replace("{{time}}",I(i,e))}};const z=A;function Q(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var G=["D","DD"],X=["YY","YYYY"];function R(t){return-1!==G.indexOf(t)}function J(t){return-1!==X.indexOf(t)}function V(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var K=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,$=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Z=/^'([^]*?)'?$/,tt=/''/g,et=/[a-zA-Z]/;function nt(t){return t.match(Z)[1].replace(tt,"'")}function at(n,a){n.addEventListener("click",(()=>{a.projectTitleItBelongs&&(ot(a),a.projectTitleItBelongs=""),it(a,t),n.parentNode.parentNode.remove(),console.log(t),console.log(e)}))}function rt(t,e){t.addEventListener("click",(()=>{!1===e.checkmark?e.checkmark=!0:e.checkmark=!1}))}const it=(t,e)=>{for(let n=0;n<e.length;n++)e[n]._id===t._id&&(e[n]="")},ot=t=>{const n=e.find((e=>e.title===t.projectTitleItBelongs));for(let e=0;e<n._attachedProjectTodos.length;e++)n._attachedProjectTodos[e]._id===t._id&&(n._attachedProjectTodos[e]={})},dt=function(t){const e=t||ct();if(null===e)return null;const n=document.createElement("div"),a=document.createElement("div"),r=document.createElement("button"),i=document.createElement("div"),o=document.createElement("div"),d=document.createElement("button"),s=document.createElement("div"),c=document.createElement("div");return n.appendChild(a),n.appendChild(i),n.appendChild(o),a.appendChild(r),o.appendChild(d),i.appendChild(s),i.appendChild(c),n.classList.add("todo-container"),n.classList.add("faded-out"),a.classList.add("buttons"),a.classList.add("checkmark"),o.classList.add("todo"),o.classList.add("buttons"),o.classList.add("right"),i.classList.add("todo"),i.classList.add("body"),s.classList.add("todo"),s.classList.add("title"),c.classList.add("due-date"),requestAnimationFrame((()=>{n.classList.remove("faded-out")})),r.innerHTML='<i class="fa-solid fa-check fa-2xs"></i>',s.textContent=e.title,c.textContent=e.dueDate,d.innerHTML='<i class="fa-solid fa-trash-can fa-lg">',c.style.color=function(t){return{1:"darkblue",2:"darkorange",3:"crimson"}[t.priority]}(e),rt(r,e),at(d,e),n};function st(t){localStorage.setItem(t.title,JSON.stringify(t))}const ct=()=>{let e=prompt("Enter title");if(null===e)return null;if(e.length<1||e.length>40)return void alert("Title needs a min of 1 character and no more than 40 characters!");let n=prompt("Enter priority (1 = low, 3 = high)");if(null===n)return null;let a=prompt("Enter description");if(null===a)return null;if(a.length>80)return void alert("Description can't be more than 80 characters!");let r=ut(e,18,2,2022,n,a);return t.push(r),st(r),r},ut=(t,e,a,o,d,s)=>({_id:lt(),title:t,dueDate:function(t,e,a){n(2,arguments);var o=String(e),d=a||{},s=d.locale||g,c=s.options&&s.options.firstWeekContainsDate,u=null==c?1:p(c),l=null==d.firstWeekContainsDate?u:p(d.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=s.options&&s.options.weekStartsOn,m=null==h?0:p(h),f=null==d.weekStartsOn?m:p(d.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var w=r(t);if(!i(w))throw new RangeError("Invalid time value");var b=Q(w),y=v(w,b),C={firstWeekContainsDate:l,weekStartsOn:f,locale:s,_originalDate:w};return o.match($).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,z[e])(t,s.formatLong,C):t})).join("").match(K).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return nt(n);var r=F[a];if(r)return!d.useAdditionalWeekYearTokens&&J(n)&&V(n,e,t),!d.useAdditionalDayOfYearTokens&&R(n)&&V(n,e,t),r(y,n,s.localize,C);if(a.match(et))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("")}(new Date(o,a,e),"MMMM, E d"),priority:d,description:s,projectTitleItBelongs:"",checkmark:!1}),lt=function(){let t=0;return function(){return t++}}();function ht(t){let n=document.getElementById("dynamic-content");const a=document.createElement("div"),r=document.createElement("div"),i=document.createElement("button"),o=document.createElement("div"),d=document.createElement("div"),s=document.createElement("button"),c=document.createElement("button"),u=(document.createElement("div"),document.createElement("div")),l=document.createElement("div"),h=document.createElement("div");a.appendChild(r),a.appendChild(o),a.appendChild(d),r.appendChild(i),d.appendChild(c),d.appendChild(s),o.appendChild(u),o.appendChild(l),o.appendChild(h),a.classList.add("todo-container"),a.classList.add("faded-out"),r.classList.add("buttons"),r.classList.add("checkmark"),d.classList.add("todo"),d.classList.add("buttons"),d.classList.add("right"),o.classList.add("todo"),o.classList.add("body"),u.classList.add("todo"),u.classList.add("title"),l.classList.add("due-date"),h.classList.add("todo"),h.classList.add("description"),requestAnimationFrame((()=>{a.classList.remove("faded-out")}));const m=t||ct();return null===m?null:(i.innerHTML='<i class="fa-solid fa-check fa-2xs"></i>',u.textContent=m.title,l.textContent=m.dueDate,h.textContent=m.description,c.innerHTML='<i class="fa-solid fa-arrow-right-to-bracket fa-lg"></i>',s.innerHTML='<i class="fa-solid fa-trash-can fa-lg">',l.style.color=function(t){return{1:"darkblue",2:"darkorange",3:"crimson"}[t.priority]}(m),rt(i,m),function(t,n){t.addEventListener("click",(()=>{n.projectTitleItBelongs?alert("Task already assigned to a project."):(t=>{const n=prompt("Insert the project title where this task should be added to ");if(null===n)return;const a=e.find((t=>t.title===n));a?(a._attachedProjectTodos.push(t),t.projectTitleItBelongs=n):alert("Project does not exist. Make sure the title is well written or create the project.")})(n)}))}(c,m),at(s,m),n.appendChild(a),n)}const mt=()=>{let t=prompt("Enter title");if(!pt(t))return null;const n=ft(t);return e.push(n),st(n),n},ft=t=>({_id:gt(),title:t,isDefault:!1,_attachedProjectTodos:[]}),gt=function(){let t=0;return function(){return t++}}(),pt=t=>null!==t&&(t.length<1||t.length>40?(alert("Title needs a min of 1 character and no more than 40 characters!"),!1):!e.some((e=>e.title===t))||(alert("Project already exists! Please pick another title."),!1));function wt(n){let a=document.getElementById("dynamic-content");const r=n||mt();if(null==r)return null;const i=document.createElement("div"),o=document.createElement("div"),d=document.createElement("button"),s=document.createElement("button"),c=document.createElement("button"),u=document.createElement("button"),l=document.createElement("div"),h=document.createElement("div"),m=document.createElement("div"),f=document.createElement("div"),g=document.createElement("ol");return i.appendChild(l),l.appendChild(h),h.appendChild(m),h.appendChild(o),l.appendChild(f),f.appendChild(g),o.appendChild(d),o.appendChild(s),o.appendChild(c),o.appendChild(u),r._attachedProjectTodos.length>0&&r._attachedProjectTodos.forEach((t=>{0===Object.keys(t).length&&!1===t.checkmark||g.appendChild(dt(t))})),i.classList.add("project-container"),i.classList.add("faded-out"),o.classList.add("buttons"),o.classList.add("right"),l.classList.add("project"),h.classList.add("project-header"),m.classList.add("project"),m.classList.add("title"),f.classList.add("todo-list-container"),g.classList.add("todo-list"),requestAnimationFrame((()=>{i.classList.remove("faded-out")})),d.innerHTML='<i class="fa-solid fa-plus fa-lg"></i>',s.innerHTML='<i class="fa-solid fa-arrow-right-to-bracket fa-lg"></i>',u.innerHTML='<i class="fa-solid fa-trash-can fa-lg">',c.innerHTML='<i class="fa-solid fa-font-awesome"></i>',m.textContent=r.title,function(t,e){t.addEventListener("click",(()=>{const t=ct();e._attachedProjectTodos.push(t),t.projectTitleItBelongs=e.title,dt(t)}))}(d,r),function(e,n){e.addEventListener("click",(()=>{const e=prompt("Insert the todo title that you want to add to this project");null!==e&&((e,n)=>{const a=t.find((t=>t.title===n));a&&!a.projectTitleItBelongs?(e._attachedProjectTodos.push(a),a.projectTitleItBelongs=e.title):alert("Task already assigned to a project or does not exist.")})(n,e)}))}(s,r),((t,n)=>{t.addEventListener("click",(()=>{(t=>{if(!t.isDefault)return e.some((t=>!0===t.isDefault))?void alert("There is already a project set to default!"):void(t.isDefault=!0);t.isDefault=!1})(n)}))})(c,r),function(n,a){n.addEventListener("click",(()=>{a._attachedProjectTodos=a._attachedProjectTodos.map((t=>t.projectTitleItBelongs="")),it(a,e),n.parentNode.parentNode.parentNode.parentNode.remove(),console.log(t),console.log(e)}))}(u,r),a.appendChild(i),a}function vt(){const n=document.getElementById("dynamic-content");for(;n.firstChild;)n.firstChild.remove();const a=document.createElement("h3"),r=document.createElement("h3"),i=document.createElement("h3"),o=document.createElement("h3");a.classList.add("home-header"),a.classList.add("not-attached"),r.classList.add("home-header"),i.classList.add("home-header"),i.classList.add("empty-projects"),o.classList.add("home-header"),a.textContent="Unnattached task",r.textContent="Projects",i.textContent="Empty projects",o.textContent="Archived task",n.appendChild(a),t.forEach((t=>{!t||t.projectTitleItBelongs||t.checkmark||ht(t)})),n.appendChild(r),e.forEach((t=>{if(t){const e=t._attachedProjectTodos.some((t=>Object.keys(t).length>0));t._attachedProjectTodos.length>0&&e&&wt(t)}})),n.appendChild(i),e.forEach((t=>{t&&t._attachedProjectTodos.every((t=>0===Object.keys(t).length))&&wt(t)})),n.appendChild(o),t.forEach((t=>{t&&t.checkmark&&ht(t)}))}function bt(){const t=document.getElementById("dynamic-content"),n=e.find((t=>!0===t.isDefault));if(n){for(;t.firstChild;)t.firstChild.remove();wt(n)}else alert("There is no default project set!")}const yt=function(t,e){t.addEventListener("click",(()=>{e()}))};Object.keys(localStorage).forEach((e=>{console.log(e);let n=localStorage.getItem(e);t.push(n),console.log(n.priority)})),function(){const t=document.getElementById("content"),e=document.createElement("div"),n=document.createElement("div"),a=document.createElement("div"),r=document.createElement("h2"),i=document.createElement("hr"),o=document.createElement("h2"),d=document.createElement("button"),s=document.createElement("button"),c=document.createElement("button"),u=document.createElement("button"),l=document.createElement("hr"),h=document.createElement("button"),m=document.createElement("button");t.appendChild(e),t.appendChild(n),t.appendChild(a),e.appendChild(r),e.appendChild(i),e.appendChild(o),e.appendChild(d),e.appendChild(s),e.appendChild(c),e.appendChild(u),e.appendChild(l),e.appendChild(h),e.appendChild(m),e.classList.add("nav-bar"),r.classList.add("header1"),i.classList.add("header-line"),o.classList.add("header2"),n.id="dynamic-content",d.classList.add("nav-button"),s.classList.add("nav-button"),c.classList.add("nav-button"),u.classList.add("nav-button"),h.classList.add("nav-button"),m.classList.add("nav-button"),r.textContent="Todo",o.textContent="App",d.innerHTML='<i class="fa fa-home fa-lg"></i>  Home',s.innerHTML='<i class="fa fa-hourglass fa-lg"></i> Working on...',h.innerHTML='<i class="fa-solid fa-list-check fa-lg"></i> New project',m.innerHTML='<i class="fa-solid fa-check fa-lg"></i> New task',c.innerHTML='<i class="fa-solid fa-cloud-sun fa-lg"></i> Today',u.innerHTML='<i class="fa-solid fa-calendar-days fa-lg"></i> Upcoming',yt(d,vt),yt(s,bt),yt(h,mt),yt(m,ct)}(),vt()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,